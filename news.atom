<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>http://www.next-presso.com/</id>
  <title>Next Presso</title>
  <updated>2015-11-18T08:24:38+01:00</updated>
  <link href="http://www.next-presso.com/news.atom" rel="self" type="application/atom+xml" />
  <link href="http://www.next-presso.com/" rel="alternate" type="text/html" />
  <entry>
    <id>http://www.next-presso.com/2014/06/you-think-you-know-everything-about-cdi-events-think-again.html</id>
    <title>You think you know everything about CDI events… Think again!</title>
    <updated>2015-11-18T08:24:38+01:00</updated>
    <published>2014-06-10T00:00:00+00:00</published>
    <link href="http://www.next-presso.com/2014/06/you-think-you-know-everything-about-cdi-events-think-again.html" rel="alternate" type="text/html" />
    <category term="CDI"></category>
    <summary>
      Event Bus may surprise you
      
      
      CDI events are one of the shiniest feature in the CDI specification. They are a easy to understand and use and are a straight forward implementation of the Observer Design Pattern. To sum up they add more decoupling to the Dependency Injection by allowing notification of unknown target at development time (great to develop framework). Yet, documentation about event is often misleading and contains inaccurate information, probably due to the fact that the specification was wrong before we corrected it for CDI 1.2 release ;). This post is the opportunity to update or clarify your knowledge...
    </summary>
    <content type="html">
      &lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;imageblock&quot; style=&quot;float: left&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://www.next-presso.com/images/posts/2014/Event-bus.jpg&quot; alt=&quot;Event bus&quot; width=&quot;310&quot; /&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;Event Bus may surprise you&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI events are one of the shiniest feature in the CDI specification. They are a easy to understand and use and are a straight forward implementation of the Observer Design Pattern. To sum up they add more decoupling to the Dependency Injection by allowing notification of unknown target at development time (great to develop framework). Yet, documentation about event is often misleading and contains inaccurate information, probably due to the fact that the specification was wrong before we corrected it for CDI 1.2 release ;). This post is the opportunity to update or clarify your knowledge  about how events work in CDI 1.0  and 1.1+ and what could come in CDI 2.0.
      If you want to “play” with event you can checkout my Github project EventsTest to use it as a sandbox.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you are familiar with events you can directly go to the more advanced or less know features&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;back-to-the-basics&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#back-to-the-basics&quot;&gt;&lt;/a&gt;Back to the basics&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Before going further, let’s introduce basic concepts around CDI events.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;what-s-an-event&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-s-an-event&quot;&gt;&lt;/a&gt;What’s an event?&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;CDI events are defined by 2 things :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;A java object (the event object)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;A set of qualifiers (annotations having the meta annotation @Qualifier)
      The event Object could be of any Java type and don’t have to be CDI related (try to avoid using bean instance as event object, it’s confusing and if the bean scope is not @Dependent could bring issues related to bean lifecycle). Qualifiers are the same used to define CDI Bean or injection point. They can have members or not. And their members value are part of the qualifier definition or not (if they have the @NonBinding annotation).&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;how-to-fire-an-event&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-fire-an-event&quot;&gt;&lt;/a&gt;How to fire an event?&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The most universal way to fire an event is to use the BeanManager.fireEvent(Object event,Annotation…​ qualifiers) method. BeanManger is directly accessible in CDI bean by injecting it:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;@Inject
      BeanManager beanManager;
      
      public void doSomething() {
        beanManager.fireEvent(new Payload());
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Outside CDI you can alway retrieve it by JNDI (by looking up for “java:comp/BeanManager” name)or more easily in CDI 1.1+ via CDI class:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;BeanManager beanManager = CDI.current().getBeanManager();
      
      public void doSomething() {
        beanManager.fireEvent(new Payload());
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In CDI bean, it is more common and natural to use the Event&amp;lt;T&amp;gt; interface to get possibility to fire an event like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;@Inject
      Event&amp;lt;Payload&amp;gt; payloadEvent;
      
      public void doSomething() {
        payloadEvent.fire(new Payload());
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;code&gt;Event&amp;lt;T&amp;gt;&lt;/code&gt; interface is an helper to fire event whose type is totally CDI agnostic and thus doesn’t include a way of being fired. To make a gun fire analogy, In the previous example, see payloadEvent as the bullet case while the bullet is the instance of Payload you gave as parameter of the fire() method.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;observing-events&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#observing-events&quot;&gt;&lt;/a&gt;Observing events&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To observe an event you’ll have to add an observer method in an enable bean of your application. An observer method is a method whose first parameter has the @Observes annotation. The type of the parameter with @Observes will be used to resolve target observer when an event is fired as we’ll see later. So:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;public void listenToPayload(@Observes Payload event) {
        ...
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;will be triggered (if the method is in an active bean) for all events whose type are Payload or a super type of Payload. Off course qualifier may be added to the observer to restrict event triggering:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;public void listenToPayload(@Observes @Qualified Payload event) {
        ...
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The observers resolution occurs at runtime when an event is fired. All the observers that match the event will be triggered by the CDI container. Note that the observer method may have other beans as parameters. They will be injected by the container before calling the method :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;public void listenToPayload(@Observes Payload event, PayloadService service) {
        ...
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;features-you-may-have-missed-regarding-cdi-events&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#features-you-may-have-missed-regarding-cdi-events&quot;&gt;&lt;/a&gt;Features you may have missed regarding CDI events&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The following CDI events feature are less known or badly documented.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;no-type-erasure-for-event-type&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#no-type-erasure-for-event-type&quot;&gt;&lt;/a&gt;No type erasure for event type&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It’s not an hidden feature but more something implicit in CDI than can be missed. As CDI is a type centric specification (I always sigh when I see and injection point with a @Name qualifier), it does a better job than standard Java regarding parameterized type.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For instance take these 2 observer methods:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;public void processNumberList(@Observes List&amp;lt;Number&amp;gt; event) {
        ...
      }
      
      public void processIntegerList(@Observes List&amp;lt;Integer&amp;gt; event) {
        ...
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The container will make the distinction between both when resolving observer depending of the parameterized type of the event.  And in CDI 1.1+ (wildcards are not allowed in observer event parameter in CDI 1.0) if you declare the following observers :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;public void processIntegerList(@Observes List&amp;lt;? super Integer&amp;gt; event) {
      ...
      }
      
      public void processNumberList(@Observes List&amp;lt;? extends Number&amp;gt; event) {
      ...
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Both will be called if your event type is List&amp;lt;Integer&amp;gt; or List&amp;lt;Number&amp;gt;. Although the first observer will fit for add elements to the list while the second will be used to fetch elements from the list.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Remember that if wildcards are allowed in observer in CDI 1.1+ if they aren’t in Event injection point.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;qualifiers-don-t-work-with-event-as-they-work-with-beans&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#qualifiers-don-t-work-with-event-as-they-work-with-beans&quot;&gt;&lt;/a&gt;Qualifiers don’t work with event as they work with beans&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;That’s an important point that was very badly explained in the spec before CDI 1.2. Developers often assume that Event&amp;lt;&amp;gt; and Instance&amp;lt;&amp;gt; have quite similar way of functioning regarding qualifiers, that’s a big mistake. But let’s start with the most important here :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;An observer matches an event if its type is in the event types set and if the observer has a subset of the qualifier of the event.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Better check this with a piece of code&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;/**
       * Qualifier with binding member
       */
      @Qualifier
      @Target({TYPE, METHOD, PARAMETER, FIELD})
      @Retention(RUNTIME)
      @Documented
      public @interface Qualified {
          String value() default &amp;quot;&amp;quot;;
      }
      
      public class EventTestService {
      
          @Inject
          @Qualified(&amp;quot;strong&amp;quot;)
          Event&amp;lt;Payload&amp;gt; payLoadEvent;
      
          public void fireEvent() {
            payloadEvent.fire(new Payload());
          }
      
          public void processUnqualifiedPayload(@Observes Payload event) {}
      
          public void processQualifiedPayload(@Observes @Qualified(&amp;quot;strong&amp;quot;) Payload event) {}
      
          public void processUnqualifiedObject(@Observes Object event) {}
      
          public void processQualifiedObject(@Observes @Qualified(&amp;quot;strong&amp;quot;) Object event) {}
      
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Yes, all the 4 declared observers will be called by the container when the event is fired. Useful to know that ;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So &lt;code&gt;@Any&lt;/code&gt; qualifier is totally useless on events or observers&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The spec requires that all created events should have the &lt;code&gt;@Any&lt;/code&gt; automatically added, but as we just saw &lt;code&gt;@Any&lt;/code&gt; has the same behavior in event that @Default qualifier (no qualifier), so prefer using no qualifier instead of using @Any, it’ll be less confusing.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;Event&amp;lt;&amp;gt;&lt;/code&gt; is here to build events not filter them&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Again &lt;code&gt;Event&lt;/code&gt; looks like &lt;code&gt;Instance&lt;/code&gt; but is very different. While &lt;code&gt;Instance&lt;/code&gt; is a tool to lookup for beans, &lt;code&gt;Event&lt;/code&gt; is a tool to build an event from an object and qualifiers.
      So keep in mind that when you use &lt;code&gt;Event.select(Annotation... qualifiers)&lt;/code&gt; you are adding qualifier to the event you’ll be firing.
      For instance :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;public class EventTestService {
      
          @Inject
          @MyQualifier
          Event&amp;lt;Payload&amp;gt; payLoadEvent;
      
          public void fireEvent() {
            payloadEvent.select(new QualifiedLiteral()).fire(new Payload());
          }
      }
      
      public class QualifiedLiteral extends AnnotationLiteral&amp;lt;Qualified&amp;gt; implements Qualified {
      
          private String value=&amp;quot;&amp;quot;;
      
          public QualifiedLiteral(String value) {
              this.value = value;
          }
      
          public QualifiedLiteral() {
              this(&amp;quot;&amp;quot;);
          }
      
          public String value() {
              return value;
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;will add the &lt;code&gt;@Qualified&lt;/code&gt; qualifier to the event before firing it. So the final event will have &lt;code&gt;@MyQualifier @Qualified(&amp;quot;&amp;quot;)&lt;/code&gt; qualifiers.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;advanced-event-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#advanced-event-features&quot;&gt;&lt;/a&gt;Advanced Event Features&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;conditional-observer-methods&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conditional-observer-methods&quot;&gt;&lt;/a&gt;Conditional Observer methods&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As we saw, observer methods have to be in a bean to be registered by the container. If the bean containing the observer has a different scope than @Dependent we may want to control if the call to the observer should trigger bean instantiation.
      You can do that with the receive member of @Observes annotation which can take the enum values javax.enterprise.event.Reception.ALWAYS (by default) or javax.enterprise.event.Reception.IF_EXISTS.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;@RequestScoped
      public class EventTestService {
      
          // will always be called (bean my be instantiated for this call)
          public void processQualifiedPayload(@Observes(receive=ALWAYS) Type1 event) {}
      
          // will be called only if the bean already exists in Request scope
          public void processUnqualifiedPayload(@Observes(receive=IF_EXISTS) Type2 event) {}
      
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Remember that IF_EXISTS cannot be used in a bean having @Dependent scope since the bean cannot exists before observer is called. If you do the mistake the container will remember you that at startup.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;transactional-observer-methods&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#transactional-observer-methods&quot;&gt;&lt;/a&gt;Transactional observer methods&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Transactional observer methods are observer methods which receive event notifications during the before or after completion phase of the transaction in which the event was fired. If no transaction is in progress when the event is fired, they are notified at the same time as other observers.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;A before completion observer method is called during the before completion phase of the transaction.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;An after completion observer method is called during the after completion phase of the transaction.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;An after success observer method is called during the after completion phase of the transaction, only when the transaction completes successfully.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;An after failure observer method is called during the after completion phase of the transaction, only when the transaction fails.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can specify the transaction phase of the observer call with the during member of the &lt;code&gt;@Observes&lt;/code&gt; annotation.
      The enumeration &lt;code&gt;javax.enterprise.event.TransactionPhase&lt;/code&gt; identifies the kind of transactional observer method the enum values are:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;IN_PROGRESS: default value
      BEFORE_COMPLETION
      AFTER_COMPLETION
      AFTER_FAILURE
      AFTER_SUCCESS
      For instance:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;@RequestScoped
      public class EventTestService {
      
          // is called when the event is fired
          public void processCustomerUpdateRequest(@Observes(during=IN_PROGRESS) @Updated customer cust) {}
      
          // is called by the same event fired than previous observer but only after the trnsaction complete successufully
          public void processCustomerUpdated(@Observes(during=AFTER_SUCCESS) @Updated customer cust) {}
      
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Note that the transaction observer mechanism is the only way to differ and order some observer right now.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;built-in-events-linked-to-scope-lifecycle-cdi-1-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#built-in-events-linked-to-scope-lifecycle-cdi-1-1&quot;&gt;&lt;/a&gt;Built-in events linked to scope lifecycle (CDI 1.1+)&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Since CDI 1.1, the container fire events when context are created and destroyed, thanks to the provided @Intialized and @Destroyed qualifiers.
      If your application is deployed in a servlet container, the event payload correspond to the servlet scope object corresponding to the initialized or destroyed CDI scope. Otherwise payload will be java.lang.object
      You can observe these event in your application like this (if it’s deployed in a servlet container) :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;public void processApplicationScopedInit(@Observes @Initialized(ApplicationScoped.class) ServletContext payload) {}
      
      public void processApplicationScopedDestroyed(@Observes @Destroyed(ApplicationScoped.class) ServletContext payload) {}
      
      public void processSessionScopedInit(@Observes @Initialized(SessionScoped.class) HttpSession payload) {}
      
      public void processSessionScopedDestroyed(@Observes @Destroyed(SessionScoped.class) HttpSession payload) {}
      
      public void processRequestScopedInit(@Observes @Initialized(RequestScoped.class) ServletRequest payload) {}
      
      public void processRequestScopedDestroyed(@Observes @Destroyed(RequestScoped.class) ServletRequest payload) {}
      
      public void processConversationScopedInit(@Observes @Initialized(ConversationScoped.class) ServletRequest payload) {}
      
      public void processConversationScopedDestroyed(@Observes @Destroyed(ConversationScoped.class) ServletRequest payload) {}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Specification encourage third party extension to do the same for custom context.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;events-metadata-cdi-1-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#events-metadata-cdi-1-1&quot;&gt;&lt;/a&gt;Events Metadata (CDI 1.1+)&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Version 1.1 of the spec introduced EventMetadata interface. It allows an observer to get all the metadata about an event.
      You get the EventMetadata by adding it to the observer parameters :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;public void processPayload(@Observes Payload event, EventMetadata meta) {}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The EventMetadata contains the following methods:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;getQualifiers() returns the set of qualifiers with which the event was fired.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;getInjectionPoint() returns the InjectionPoint from which this event payload was fired, or null if it was fired from BeanManager.fireEvent(…).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;getType() returns the type representing runtime class of the event object with type variables resolved.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This bring a solution to add more fine-grained filtering on observer execution depending on actual metadata of the triggered event&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;events-limitation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#events-limitation&quot;&gt;&lt;/a&gt;Events limitation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Right now, CDI events have two big limitation out of the box&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;events-are-only-synchronous&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#events-are-only-synchronous&quot;&gt;&lt;/a&gt;Events are only synchronous&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Out of the box events are synchronous: method firing an event has to wait the end of all observers invocation before executing instruction after event firing. So no fire and forget option and off course no callback approach.
      The obvious solution if you need asynchronous event approach is to use an EJB method as an observer and annotate it @Asynchronous. Other options exists but you need to create a CDI portable extension and play with threads. I’ll try to explore that in a future post.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;observers-have-no-orders&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#observers-have-no-orders&quot;&gt;&lt;/a&gt;Observers have no orders&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Yes, there’s no out of the box solution to guarantee order of observers execution. The only tiny exception is using transaction phase to do so but it’s very limited. Perhaps a CDI extension could help us here again. I’ll try to explore this approach in a future post.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;pattern-and-tips-with-events&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pattern-and-tips-with-events&quot;&gt;&lt;/a&gt;Pattern and tips with events&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Putting all the knowledge we have now on event and other CDI stuff we can figure out some interesting pattern for our developement.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;the-plugin-pattern&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-plugin-pattern&quot;&gt;&lt;/a&gt;The plugin Pattern&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We saw that CDI event data is totally free. You can choose any object (again avoid no dependent bean) to fire an event and this object will be received as a playlod by each observer matching the event type and qualifier.
      An other interesting fact is that this payload is mutable and can be modified by its observers. Following this idea, observers can become a way to enrich a given object with new data. We can use this approach to seamlessly enhance content by adding a CDI archive to an existing application.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;the-catch-them-all-pattern&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-catch-them-all-pattern&quot;&gt;&lt;/a&gt;The catch them all pattern&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Need to observe all fired event and have their info (for logging purpose for instance), you only have to observe Object.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;public void processPayload(@Observes Object event, EventMetadata meta) {}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;EventMetadata will even help you to know in which bean the event was fired. A nice way to build a bridge with a messaging service (did I say JMS? ;) )&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;don-t-forget-interceptors-and-decorators&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#don-t-forget-interceptors-and-decorators&quot;&gt;&lt;/a&gt;Don’t forget Interceptors and Decorators&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;While it’s forbidden to declare observer in decorators or interceptors, you can still fire event from them. So they can be used to enhance existing bean and add event triggering to them without touching their code.
      A nice way to add event notification only when needed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;future-for-cdi-events&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#future-for-cdi-events&quot;&gt;&lt;/a&gt;Future for CDI events&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We have a lot of idea in CDI 2.0 regarding event enhancement. Off course adding observer priority and asynchronous treatment are on the top of the list. On asynchronous event we could even think of adding callback method support based on java.lang.invoke package.
      More ambitious ideas are floating around like giving a range to events making them cross the War or Ear barrer and spread across the server or the cluster. That could lead us to provide an event bus at the server level and help java EE to adopt new application architectures in the future  EE versions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.next-presso.com/2014/03/forward-cdi-2-0.html</id>
    <title>Forward CDI 2.0</title>
    <updated>2015-11-18T08:24:38+01:00</updated>
    <published>2014-03-15T00:00:00+00:00</published>
    <link href="http://www.next-presso.com/2014/03/forward-cdi-2-0.html" rel="alternate" type="text/html" />
    <category term="CDI"></category>
    <summary>
      CDI is probably one of most overlooked specification in Java EE, yet when version 1.0 was released 4 years ago it was presented as “Java EE extension point”. Technically it’s the case, but for all kind of reason some JSR didn&#8217;t adopt CDI totally to provide a more consistent experience in Java EE. Today the IT world is moving fast and after long years of heavy memory and process solution we’re going back to resource optimization with mobile or embedded platform. As CDI can leave outside Java EE, it could play an interesting role in this new approach. But before...
    </summary>
    <content type="html">
      &lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;span class=&quot;image&quot; style=&quot;float: left&quot;&gt;&lt;img src=&quot;http://www.next-presso.com/images/posts/2014/back-to-the-future.jpg&quot; alt=&quot;back to the future&quot; width=&quot;200&quot; /&gt;&lt;/span&gt;
      CDI is probably one of most overlooked specification in Java EE, yet when version 1.0 was released 4 years ago it was presented as “Java EE extension point”. Technically it’s the case, but for all kind of reason some JSR didn’t adopt CDI totally to provide a more consistent experience in Java EE. Today the IT world is moving fast and after long years of heavy memory and process solution we’re going back to resource optimization with mobile or embedded platform. As CDI can leave outside Java EE, it could play an interesting role in this new approach. But before that it should evolve to be ready for this new challenge (and continue to pursue its growing role in Java EE as well) In this post I’ll try to share my ideas on how  CDI should evolve to meet it future rendez-vous. So I’ll start by exposing the new feature I’d like to see in CDI before exploring a more modular architecture for the spec to make it scalable from Raspberry  Pi to Huge cluster solutions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;Disclaimer : Since I’ll be leading CDI 2.0 specification (with Pete Muir) it’s important to stress that this post is not an official announcement about the content of the CDI 2.0 specification. It’s only my thought and doesn’t engage CDI Expert Group or Red Hat.&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;new-features-i-d-like-to-have&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features-i-d-like-to-have&quot;&gt;&lt;/a&gt;New features I’d like to have&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Some of these features are already in the Expert Group pipeline, some were deferred during CDI 1.1 for CDI 2.0, some are standardisation of third party development (mainly &lt;a href=&quot;http://deltaspike.apache.org&quot; target=&quot;_blank&quot;&gt;Apache Deltaspike&lt;/a&gt;) and some are totally new. Anyway, most of these point are important to help third party project or JSR to get the best of CDI.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;java-se-bootstrapping&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#java-se-bootstrapping&quot;&gt;&lt;/a&gt;Java SE Bootstrapping&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I don’t need to insist on this point. Today each implementation provide a way to bootstrap CDI in Java SE or in a poor server (Servlet only) environnement. Apache Deltaspike has a generic solution to do it. So it’s time that the CDI spec integrates this to be officially available in Java SE.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;container-hot-swap&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#container-hot-swap&quot;&gt;&lt;/a&gt;Container hot swap&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Strong typed injection is great, but CDI is too strict on this in my opinion. To support dynamic JVM language, we should be able to trigger a BeanManager restart with runtime added bean. this could be done for instance by providing API for bootstrapping a new CDI container with augmented content. If the boot went well have more step to duplicate status and existing instance in the new container and garbage the old one. In case of error we could keep the existing BeanManager. A costly but very useful feature for advanced tools or app that could provide specific enhancement system (CMS, e-commerce platform, etc…).&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;cdi-lite&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cdi-lite&quot;&gt;&lt;/a&gt;CDI lite&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As said in my introduction, there’s a shared wish to bring CDI to embedded devices like Raspberry pi, Arduino, Lego Mindstorms or Android. Today the massive uses of proxies in implementations prevent us to go in that direction.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Java Proxies were very useful in the 2000’s, but now they begin to be old fashioned and brings a lot of problem (huge stack trace, JVM optimization, High resource consumption, etc…). Right now CDI spec take for granted that proxies will be used in implementations.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For this reason, it could be a good solution to provide a subset of CDI specification with less magic and less weight. Let’s call it “CDI Lite” (like EJB Lite that were introduced in Java EE 6). This CDI subset would keep all the DI stuff but would probably get rid of all the Context part as well as Interceptor and Decorator.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;But there are others tracks that could be explored to make CDI lighter without removing some of its features.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;bye-bye-proxy-hello-annotation-processing-and-invokedynamic&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#bye-bye-proxy-hello-annotation-processing-and-invokedynamic&quot;&gt;&lt;/a&gt;Bye bye Proxy, hello Annotation Processing and InvokeDynamic&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This other way is to find solution to replace proxies by something else in CDI implementations. Right now we have two candidates :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Annotation Processing : process Annotation at compile time to produce the “magic” injection/injected/decorated code in a static way like it’s done in &lt;a href=&quot;http://google.github.io/dagger/&quot;&gt;Dagger&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;InvokeDynamic : Runtime linking could provide a proxy-like behavior with less drawbacks and probably more performances. Regarding this second approach I started to do some researches and hope provide a proof of concept soon.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;xml-config-file&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#xml-config-file&quot;&gt;&lt;/a&gt;XML config file&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It’s time to provide this feature in the spec. There use to be extensions out there that provide this feature, but this is a core feature allowing bean registering and annotation overloading at deploy time and it should be in the spec. If CDI could become more and more present in the other spec, it could also be the beginning of a universal Java EE config file format !&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Today, some framework like Apache Camel cannot use CDI because there is no config solution. Providing a solution on that point would ease CDI adoption.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;asynchronous-event-action&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#asynchronous-event-action&quot;&gt;&lt;/a&gt;Asynchronous event / action&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;At the vert.x and node.js era we definitely should support asynchronous treatment (and let’s dream : call back). This could be done By using concurrency spec. We would provide a way to support asynchronous call without using EJB and asynchronous event by adding a boolean asynchronous field in @Observes and, optionally, a handle on a callback&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;support-of-startup&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#support-of-startup&quot;&gt;&lt;/a&gt;Support of @Startup&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;An easy feature to add : provide a way to have a CDI bean automatically instantiated after the initialization phase like we already have in EJB.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It’s a very common request by developers and it’s not very hard to provide.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;portable-extension-spi-promotion-usage-simplification&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#portable-extension-spi-promotion-usage-simplification&quot;&gt;&lt;/a&gt;Portable Extension SPI promotion / usage simplification&lt;/h3&gt;
      &lt;div class=&quot;imageblock&quot; style=&quot;float: right&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://www.next-presso.com/images/posts/2014/CDI-Lifecycle.png&quot; alt=&quot;CDI Lifecycle&quot; width=&quot;450&quot; /&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;CDI 1.1 container initialization and Lifecycle&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Portable Extension is, in my opinion, the best feature in CDI. Off course IoC, events or context management are great but they weren’t new when introduced in CDI 1.0.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Portable extension is a complete CDI innovation, that added to Java EE DNA the possibility to be naturally extended without using proprietary tricks.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In my opinion it’s a pity that Portable Extension were not more promoted (CDI acronym doesn’t include any idea of their existence for instance) and were placed at the end of our specification document since a lot of projects or other specification could benefit from it.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;My analyze is that this lack of communication is linked to the bunch of more or less complexe concepts (like the container initialization events shown in the right side schema) to understand before being able to deep dive into extension development. We should probably provide a higher simplified layer to get started with basic task on extension. Don’t misunderstand me, the existing mechanism is great and should be kept (with probably some enhancement) but we should provide helpers to ease extension creation. These helper could be :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Standardization of Deltaspike &lt;code&gt;AnnotatedTypeBuilder&lt;/code&gt; and &lt;code&gt;BeanBuilder&lt;/code&gt; to ease new Beans creation&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Helpers on introspection tools regarding types or annotation manipulation&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Easier way to create new scopes or extend existing ones. We encourage other spec to extend lifecycle of existing scopes (like @RequestScoped for Websocket) but it’s nearly impossible to do it without going at the implementation level.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We should also bring a special attention to the first events (until AfterTypeDiscovery) in this initialization process, since they are CDI agnostic dealing only with type and annotation metadata modification. These could become part of a future Java EE configuration system.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;ordering-event-execution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ordering-event-execution&quot;&gt;&lt;/a&gt;Ordering event execution&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So in CDI 1.1 decorator and interceptor are ordered thanks to @Priority. What about ordering events ? Using @Priority on @Observes doesn’t seem a good idea since this annotation comes from the interceptor package, but we could add an int priority field in @Observes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;no-more-segregation-for-producers-and-custom-beans&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#no-more-segregation-for-producers-and-custom-beans&quot;&gt;&lt;/a&gt;No more segregation for Producers and Custom beans&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Why produced bean or custom bean should be CDI second class citizen? I want to be able to decorate or use interceptor on my produced beans or at least have APIs that allow me to add this features to my produced beans.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;event-scoping-from-package-to-server-wide&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#event-scoping-from-package-to-server-wide&quot;&gt;&lt;/a&gt;Event scoping from package to server wide&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Having the CDI event bus at a higher level in Java EE would allow scoping our event. Soone could decide if the event should stay in the current application, be restricted to the current module (in an EAR) even the current package or on the other side be broadcasted to all app listening to it.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;transient-injection&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#transient-injection&quot;&gt;&lt;/a&gt;Transient injection&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When injecting dependent bean in a longer living bean, this injection is done once when the longer bean is instantiated. There are use cases (I’ve got one in Agorava) where I want my dependent bean to be re-injected each times it’s accessed. Today I have to write :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;@Inject Instance&amp;lt;MyBean&amp;gt; myBeanInstances;
      public Mybean getMyBean() { return myBeanInstances.get(); }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Tomorrow I’d like to write this :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;@Inject @Transient MyBean myBean;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It’s mainly syntaxic sugar but make the code more easy to write and readable. We probably could find other example here of code simplification.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;have-a-more-fluent-programmatic-lookup&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#have-a-more-fluent-programmatic-lookup&quot;&gt;&lt;/a&gt;Have a more fluent programmatic lookup&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;code&gt;Instance&amp;lt;T&amp;gt;&lt;/code&gt; interface and the programmatic lookup are incredibly useful, but it could be very cumbersome to use especially when we have to deal with Qualifiers.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This could be eased by providing tools to generate qualifier literals  with Java 8 Type Annotations for instance.  And why not a query DSL ?&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlightjs highlight nowrap&quot;&gt;&lt;code&gt;myBeanInstance.restrictedTo(BeanImp.class).withQualifier(new @MyQualifier(&amp;quot;Binding&amp;quot;) AnnotationLiteral&amp;lt;&amp;gt;(), new @MyOtherQualifier AnnotationLiteral&amp;lt;&amp;gt;()).select();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Wouldn’t it be more user friendly ?&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;monitoring-facility&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#monitoring-facility&quot;&gt;&lt;/a&gt;Monitoring facility&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Remember the great debug page in Seam 2 ? I’d like to have the same things or tools to easily build the same feature to monitor my beans and my scope. CDI does a lot of Magic and it could be nice to have tools to see all its trick and the cost of beans, context and other interceptor we deployed&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;give-me-more-modularity-a-new-architecture-for-cdi-and-java-ee&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#give-me-more-modularity-a-new-architecture-for-cdi-and-java-ee&quot;&gt;&lt;/a&gt;Give me more modularity : a new architecture for CDI (and Java EE ?)&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;span class=&quot;image&quot; style=&quot;float: left&quot;&gt;&lt;img src=&quot;http://www.next-presso.com/images/posts/2014/CDI-Next-Architecture.png&quot; alt=&quot;CDI Next Architecture&quot; width=&quot;400&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A lot of JSR complained that CDI spec is too monolithic and that implementations are too heavy comparing to theirs (they don’t want to depend on something bigger). This and the lack of standard Java SE bootstrapping, are probably the 2 mains objection to go for a deep CDI integration in some spec. So we should provide a more modular approach while keeping the possibility to gather all the modules and have a consistent stack that we could use outside Java EE. In my ideal world the different JSR / Modules would be :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;container&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#container&quot;&gt;&lt;/a&gt;Container&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This module store all the beans defined in the application. Providing as a standalone module brings the following features :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Provides a minimum api/impl for a client app that rely on JNDI to get Beans&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Provides the possibility to add plugins to the container to support new kind of components (Servlet, JPA Entity, Guice or Spring beans for instance)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Prepare the CDI container to be the future universal Java EE container that we’re waiting for&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;event-bus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#event-bus&quot;&gt;&lt;/a&gt;Event bus&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Events and observer pattern are great features of CDI spec. But they would be more useful if spec could use them without having to depend on all CDI.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We could imagine a new Java EE specification or a CDI module based on CDI event API to provide Java EE wide eventing model. We could imagine an API only relying on half a dozen classes (more if we add asynchronous treatment, ordering and event scoping) hat would do the Job.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;component-scanning-extension-engine&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#component-scanning-extension-engine&quot;&gt;&lt;/a&gt;Component Scanning &amp;amp; Extension engine&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Today each specification does class scanning at boot time. In general the app server provides a way to group this scanning process in a proprietary way. By standardizing the scanning phase events and the meta-data manipulated during this scanning phase we could provide a consistent experience and a standard way to extend Java EE. CDI already provides most of this feature with its initialization mechanism which allow to “observe” all wished existing classes in deployment and modify meta-data of these classes (i.e. annotations) .&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Imagine what you could do if the ProcessAnnotatedType event could be catch at the server level and allow you to put a “veto” on a given servlet or on a group of JPA entities? This feature lead us on the single container and the single configuration file path. A feature dreamt by a lot of developers.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;basic-di&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#basic-di&quot;&gt;&lt;/a&gt;Basic DI&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This module would include all API related to simple injection (only pseudo-scope). So all &lt;code&gt;@Inject&lt;/code&gt;, &lt;code&gt;@Qualifier&lt;/code&gt;, &lt;code&gt;Instance&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;@Producer&lt;/code&gt;, &lt;code&gt;InjectionPoint&lt;/code&gt; and other Reflection stuff will be gathered in a light API. Probably what I called “CDI lite” in my previous part.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;context-management&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#context-management&quot;&gt;&lt;/a&gt;Context Management&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Context is a nice feature of CDI but as everybody don’t need it, it should be put in a optional API package. This part will deal with all the normal scope context and complex life cycles.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;interceptor-decorator&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#interceptor-decorator&quot;&gt;&lt;/a&gt;Interceptor &amp;amp; Decorator&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Today interceptors already have their own JSR. Adding decorator to the JSR would complete the interceptor JSR.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;conclusion-cdi-needs-you&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion-cdi-needs-you&quot;&gt;&lt;/a&gt;Conclusion : CDI needs you!&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So, here’s my personal CDI wish list. You probably have yours (we collected your 3 CDI 2 wishes in december / january, and we intend to use them. If you didn’t send them, feel free to add them in comment of this article). I don’t know if all these point are good ideas (just read the comment to make your opinion). I don’t know if they are all doable (probably not). What I know is that we’ll need all help we can have to work on the future CDI 2.0. So if you want to be part of this adventure, stay tuned on &lt;a href=&quot;http://cdi-spec.org&quot; target=&quot;_blank&quot;&gt;CDI official website&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/cdispec&quot; target=&quot;_blank&quot;&gt;@cdispec&lt;/a&gt; twitter account (or &lt;a href=&quot;http://twitter.com/antoine_sd&quot; target=&quot;_blank&quot;&gt;mine&lt;/a&gt;) and this blog and give us your feedback on &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/cdi-dev&quot; target=&quot;_blank&quot;&gt;CDI ML&lt;/a&gt; or CDI IRC channel (#jsr346 on freenode). The coming months will be decisive regarding CDI (and Java EE) future.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
</feed>
